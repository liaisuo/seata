spring.application.name=seata-storage-demo
server.port=3020

# 注册中心地址
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
# 客户端给eureka server发送心跳的频率
eureka.instance.lease-renewal-interval-in-seconds=10
# 客户端的ip注册到eureka server
eureka.instance.prefer-ip-address=true
# 自定义instance-id
eureka.instance.instance-id=${spring.cloud.client.ip-address}:${server.port}

# 连接数据库
spring.datasource.url=jdbc:mysql://192.168.0.118:3306/seata_storage?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# 连接池名称
spring.datasource.hikari.pool-name=seata_storage_demo_hikari_pool
# 最小空闲连接数
spring.datasource.hikari.minimum-idle=5
# 空闲连接存活最大时间，默认600000（10分钟）
spring.datasource.hikari.idle-timeout=180000
# 连接池中的最大连接数
spring.datasource.hikari.maximum-pool-size=20
# 客户端获取连接池连接的超时时长，默认30秒
spring.datasource.hikari.connection-timeout=30000
# 设置要执行的SQL查询，测试连接的有效性
spring.datasource.hikari.connection-test-query=SELECT 1

# 下划线的数据库字段映射成驼峰风格的实体对象字段
mybatis.configuration.map-underscore-to-camel-case=true

# 打印数据库日志
logging.level.com.example.seatastoragedemo.dao=debug

# seata应用编号
seata.application-id=${spring.application.name}
# seata事务组编号
seata.tx-service-group=my_test_tx_group
# seata虚拟组映射
seata.service.vgroup-mapping.my_test_tx_group=seata-tc-server
# 指定注册中心的类型
seata.registry.type=eureka
# 注册中心的地址
seata.registry.eureka.service-url=http://localhost:8761/eureka
# 指定seata tc server集群的名字
seata.registry.eureka.application=seata-tc-server